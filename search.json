[{"lang":"en","text":"This page is about HCMS setup, if you are looking for the API configuration, please have a look to model documentation.\nHere is the application configuration:\ngenerate-frisby-skeleton.output (env: GENERATE_FRISBY_SKELETON_OUTPUT)\nWhere to generate the skeleton (generate-frisby-skeleton command only). Default: hcms-frisby.\nhcms.database-init.enabled (env: HCMS_DATABASE_INIT_ENABLED)\nShould database be initialized at startup. Default: true.\nhcms.database-init.ignoreErrors (env: HCMS_DATABASE_INIT_IGNOREERRORS)\nWhen enabled is true, should errors be ignored if any. Default: false.\nhcms.database-init.scripts (env: HCMS_DATABASE_INIT_SCRIPTS)\nClasspath scripts to use to seed the database if create is true. Default: java.util.List.of(\"ddl/01-create-database.h2.sql\").\nhcms.database.defaultAutoCommit (env: HCMS_DATABASE_DEFAULTAUTOCOMMIT)\nShould autocommit be used. Default: false.\nhcms.database.driver (env: HCMS_DATABASE_DRIVER)\nhcms.database.logAbandoned (env: HCMS_DATABASE_LOGABANDONED)\nShould abandons be logged. Default: false.\nhcms.database.maxActive (env: HCMS_DATABASE_MAXACTIVE)\nMax active connections. Default: 100.\nhcms.database.minEvictableIdleTime (env: HCMS_DATABASE_MINEVICTABLEIDLETIME)\nTimeout before any eviction test for a connection. Default: 60000.\nhcms.database.minIdle (env: HCMS_DATABASE_MINIDLE)\nMin number of connection - even when nothing happens. Default: 2.\nhcms.database.password (env: HCMS_DATABASE_PASSWORD)\nhcms.database.removeAbandoned (env: HCMS_DATABASE_REMOVEABANDONED)\nShould detected as abandonned connections be dropped. Default: false.\nhcms.database.removeAbandonedTimeout (env: HCMS_DATABASE_REMOVEABANDONEDTIMEOUT)\nAbandon timeout. Default: 60.\nhcms.database.testOnBorrow (env: HCMS_DATABASE_TESTONBORROW)\nShould connections be tested when retrieved from the pool. Default: false.\nhcms.database.testOnReturn (env: HCMS_DATABASE_TESTONRETURN)\nShould connections be tested when returning to the pool. Default: false.\nhcms.database.testWhileIdle (env: HCMS_DATABASE_TESTWHILEIDLE)\nShould connections be tested when not used and in the pool. Default: true.\nhcms.database.timeBetweenEvictionRuns (env: HCMS_DATABASE_TIMEBETWEENEVICTIONRUNS)\nTimeout (ms) between connection tests. Default: 5000.\nhcms.database.url (env: HCMS_DATABASE_URL)\nJDBC URL. Can be set to - for commands other than serve to ignore database provisioning/init.\nhcms.database.username (env: HCMS_DATABASE_USERNAME)\nhcms.database.validationQuery (env: HCMS_DATABASE_VALIDATIONQUERY)\nhcms.database.validationQueryTimeout (env: HCMS_DATABASE_VALIDATIONQUERYTIMEOUT)\nDefault timeout for validations. Default: 30.\nhcms.devMode (env: HCMS_DEVMODE)\nShould dev mode be enabled, ie reload the model on read if it changed. Default: true.\nhcms.disabledRenderers (env: HCMS_DISABLEDRENDERERS)\nList of disabled renderers (findById/findAll methods). Default: java.util.List.of().\nhcms.maxBulkRequest (env: HCMS_MAXBULKREQUEST)\nMax bulk size, i.e. how many requests can be sent at once to be executed in the same transaction. Default: 50.\nhcms.modelLocation (env: HCMS_MODELLOCATION)\nPath of the model to deploy. Default: conf/model.json.\nhcms.password.algorithm (env: HCMS_PASSWORD_ALGORITHM)\nAlgorithm to use for password hashing. Default: PBKDF2WithHmacSHA256.\nhcms.password.iterations (env: HCMS_PASSWORD_ITERATIONS)\nNumber of iterations to use for password hashing. Default: 310_000.\nhcms.password.key-length (env: HCMS_PASSWORD_KEY_LENGTH)\nKey length to use for password hashing. Default: 512.\nhcms.password.salt-length (env: HCMS_PASSWORD_SALT_LENGTH)\nSalt length to use for password hashing. Default: 16.\nhcms.security.accessValidity (env: HCMS_SECURITY_ACCESSVALIDITY)\nAccess token validity for date validation (in seconds). Default: 900.\nhcms.security.algorithm (env: HCMS_SECURITY_ALGORITHM)\nJWT algorithm. Default: RS256.\nhcms.security.issuer (env: HCMS_SECURITY_ISSUER)\nJWT issuer. Default: https://hcms.yupiik.io/token/ .\nhcms.security.keys.$index.alg (env: HCMS_SECURITY_KEYS_INDEX_ALG)\n\nhcms.security.keys.$index.crv (env: HCMS_SECURITY_KEYS_INDEX_CRV)\nhcms.security.keys.$index.e (env: HCMS_SECURITY_KEYS_INDEX_E)\nhcms.security.keys.$index.kid (env: HCMS_SECURITY_KEYS_INDEX_KID)\nhcms.security.keys.$index.kty (env: HCMS_SECURITY_KEYS_INDEX_KTY)\nhcms.security.keys.$index.n (env: HCMS_SECURITY_KEYS_INDEX_N)\nhcms.security.keys.$index.use (env: HCMS_SECURITY_KEYS_INDEX_USE)\nhcms.security.keys.$index.x (env: HCMS_SECURITY_KEYS_INDEX_X)\nhcms.security.keys.$index.x5c (env: HCMS_SECURITY_KEYS_INDEX_X5C)\nhcms.security.keys.$index.y (env: HCMS_SECURITY_KEYS_INDEX_Y)\nhcms.security.kid (env: HCMS_SECURITY_KID)\nActive (signer) kid, must be found in keys to be able to validate it properly. Default: k0001.\nhcms.security.privateKey (env: HCMS_SECURITY_PRIVATEKEY)\nRSA PEM (private key) - ensure to set the certificate in keys with the right kid.\nhcms.security.refreshValidity (env: HCMS_SECURITY_REFRESHVALIDITY)\nRefresh token validity for date validation (in seconds). Default: 28_800L.\nhcms.security.tolerance (env: HCMS_SECURITY_TOLERANCE)\nTolerance for date validation (in seconds). Default: 30.\ntracing.accumulator-buffer-size (env: TRACING_ACCUMULATOR_BUFFER_SIZE)\nHow many spans can stay in memory before a forced flush. Default: 2_048.\ntracing.enabled (env: TRACING_ENABLED)\nIs the tracing enabled. Default: false.\ntracing.flush-timeout (env: TRACING_FLUSH_TIMEOUT)\nHow often to force a zipkin flush. Ignored if negative. Default: 20_000L.\ntracing.headers-span (env: TRACING_HEADERS_SPAN)\nZipkin span header name. Default: X-B3-SpanId.\ntracing.headers-trace (env: TRACING_HEADERS_TRACE)\nZipkin trace header name. Default: X-B3-TraceId.\ntracing.operation (env: TRACING_OPERATION)\nIs the tracing enabled. Default: zipkin-client.\ntracing.service (env: TRACING_SERVICE)\nZipkin service name. Default: zipkin-client.\ntracing.skip-tls-checks (env: TRACING_SKIP_TLS_CHECKS)\nShould all SSL connections be supported over HTTPS (testing only). Default: false.\ntracing.timeout-connect (env: TRACING_TIMEOUT_CONNECT)\nConnect timeout to Zipkin server. Default: 20_000L.\ntracing.timeout-request (env: TRACING_TIMEOUT_REQUEST)\nRequest timeout to Zipkin server. Default: 20_000L.\ntracing.urls (env: TRACING_URLS)\nZipkin URL(s) - a single successful call is kept but it enables failover. Default: java.util.List.of().","title":"Configuration","url":"https://io.yupiik.hcms.github.io/hcms/configuration.html"},{"lang":"en","lvl2":"Placeholders\nSample","text":"This page lists deployment configuration. It is based on placeholders (variables) and tunable using an environment file or maven properties. You can check the pom for bundlebee-placeholder-import comment to see how to enable an externalised file to host the environment variables.\nDeployment image pull policy (if image is moving - snapshot or latest, ensure to set it to Always). Default: IfNotPresent.\nhcms.version*\nKubernetes CPU requests. Default: 1.\nKubernetes resources memory to allocate. Default: 512Mi.\nimage.registry*\nDeployment user - injected in a label. Default: unknown.\nLabel with the deployment time injected. Using maven setup it uses maven.build.timestamp property. Default: unset.\nNumber of replicas for the web application. Default: 1.\nLabel hosting the environment name (can enable to identify deployment errors). Default: default.\nThis part shows a a sample configuration file you can use as a base for bundlebee-placeholder-import file.\nif you use VSCode you can install properties completion extension to fill this page. Use this link url as a header of the file: # vscode_properties_completion_proposals=https://.../completion/placeholders.completion.properties.","title":"Deployment","url":"https://io.yupiik.hcms.github.io/hcms/deployment.html"},{"lang":"en","lvl2":"Blog example\nTips","text":"This page shows an example of model.json you can point to using the environment variable HCMS_MODELLOCATION.\nA common example is a blog example: you have posts which can have comments.\nHere is a simplistic configuration to do that - ignoring security for now:\nWhat is interesting to see there is that comments entity does not define all CRUD methods but only a subset (functionally we forbid to update a comment for example).\nif you need more control about the validations - like forbidding to comment a post on some custom rule you can write a HCMS Java extension observing io.yupiik.fusion.jsonrpc.event.BeforeRequest event to add any custom logic you need.\nThis example intends to get you started but don't forget you can go further so have look in model reference to the following items:\nsql entry in the configuration enables you to get some initialization of the database: \"sql\": [\"ddl/01-create-database.h2.sql\",\"ddl/10-blog.h2.sql\"],,\nYou can enforce the JSON-Schema of the entity ar create and update time setting \"validateWithJsonSchema\": true, in the entity,\nSecurity can be handled, often it is a mix between custom where clauses (implicit) and JWT validation,\nYou can add created, last_updated columns using computed fields,\nYou can use renderers to get a HTML flavor of asciidoc content.","title":"Example","url":"https://io.yupiik.hcms.github.io/hcms/example.html"},{"lang":"en","text":"This documentation is generated by Yupiik minisite.\nIt is composed of several pages which will enable you to get started with Yupiik Headless Content Management System (HCMS).\nIt covers from the installation to the deployment in Kubernetes.","title":"Getting Started","url":"https://io.yupiik.hcms.github.io/hcms/getting-started.html"},{"lang":"en","lvl2":"Java Mode\nBinary (linux amd64 only)\nDocker\nKubernetes","text":"as of today, no release of HCMS is done so this process should be replaced by building from Github sources temporarly.\nEnsure to use java >= 17\nDownload the hcms on https://repo.maven.apache.org/maven2/io/yupiik/hcms/hcms/ (pick the last version and ensure ensure to take `-fat.jar` artifact).\nYou can now run it with the command: java -Djava.util.logging.manager=io.yupiik.logging.jul.YupiikLogManager -jar hcms-<version>-fat.jar. We recommend you to alias this command: alias hcms='java -Djava.util.logging.manager=io.yupiik.logging.jul.YupiikLogManager -jar /path/to/hcms-<version>-fat.jar'.\nas any java application you can also just run it with a flat classpath. While this is a bit more troublesome to do because it needs to maintain a classpath this is also more reliable and easier to enhance on the long run.\nA script enables to install HCMS in ~/yupiik/hcms for linux amd64 users:\nOnce ran ensure you add ~/.yupiik/hcms/bin/ in your PATH and you can use hcms directly:\nadd this line at the end of your ~/.bashrc file.\nIf you are using docker, the ossyupiik/hcms image is ready to run:\nFor kubernetes users, a dedicated page is available .","title":"HCMS Installation","url":"https://io.yupiik.hcms.github.io/hcms/installation.html"},{"lang":"en","text":"","title":"Index","url":"https://io.yupiik.hcms.github.io/hcms/index.html"},{"lang":"en","lvl2":"API","lvl3":"Methods\nSchemas\nJSON","text":"\nThis page shows the default built-in API (security related mainly).\nParameter structure: either.\nLogs in creating an access token.\nusername (string)\npassword (string)\nRefreshes a token.\ntoken (string)\nExpiration duration - advice: never use it and prefer the expiry date in the payload of the JWT access_token/refresh_token.\nType of token should always be Bearer.","title":"JSON-RPC","url":"https://io.yupiik.hcms.github.io/hcms/json-rpc.html"},{"lang":"en","text":"Since HCMS can be packaged as an OCI image (using JIB in the build if you don't build a custom image) and has a Yupiik BundleBee alveolus, it is quite easy to deploy to any Kubernetes cluster.\nIt is mainly a matter of getting the hcms-$version-bundlebee.jar on central (see installation for the link) and running Yupiik BundleBee on it providing optional placeholders if needed: bundlebee apply --from io.yupiik.hcms:hcms:$version --alveolus hcms-jsonrpc-server --hcms.version $version (you need to set the version twice because you can use the alveolus to deploy another version even if we recommend to use the same for both).\nyou can also use Helm or kubectl to deploy Yupiik HCMS if you prefer.","title":"Kubernetes","url":"https://io.yupiik.hcms.github.io/hcms/kubernetes.html"},{"lang":"en","lvl2":"Get completion\nConfiguration concept\nConfiguration reference","lvl3":"HCMS Model Schema\nJsonRpcMethod schema\nImplicitFiltering schema\nSecurityValidation schema\nJsonSchema schema\nEntitySpec schema\nJsonRpcMethodSecurity schema\nEntityImplicitFiltering schema","text":"\nHCMS is based on a JSON model configuration. Its intent is to define from a JSON configuration an API usable by any of your client applications (often single page applications).\npages about the environment setup - datasource, server, ... - are on the configuration deployment pages.\nBefore starting to dig into the model itself, it is important to be properly setup. As soon as you get an IDE/editor with JSON schema support/completion you can just create a documentation (model.json) and inject the schema reference in it: JSON-Schema .\nHere is a basic document:\nThe configuration is focused on two concepts:\nEntities,\nJSON-RPC mapping.\nThe entity (a.k.a. EntitySpec) defines what is an entity - columns, how it is mapped to SQL and what is allowed or not on it.\nThe JSON-RPC mapping just links an entity to JSON-RPC method(s). For example linking an entity to a JSON-RPC type CRUD will define the methods $entity.findById, $entity.findAll, $entity.create, $entity.update, $entity.deleteById.\nsince JSON-RPC supports bulking (send multiple requests as arrays), the findById method is also optimized when there are only findById sent at once enabling to do a single SQL query to load them all and still comply to JSON-RPC contract.\nShould /openapi.json endpoint be enabled.\nShould /openrpc.json endpoint be enabled.\nShould /swagger-ui/ endpoint be enabled, ensure to also set enableOpenAPI to true.\nobject of type\nOpenRPC partial object, should generally set the info entry at least, likely servers and maybe externalDocs. See OpenRPC specification.\narray with items of type string\nenum with potential values CRUD, FIND_ALL, CREATE, UPDATE, FIND_BY_ID, DELETE_BY_ID\nFiltering clause(s), ex: status = 'PUBLISHED' OR author = {{user.sub}}. The placeholders use handlebars syntax. user represents the contextual JWT.\nRequires one of this list roles to be in the roles of the JWT. At least one role from the JWT (roles array) must match this list of role if set. The values is considered as a constant - like user:admin. For dynamic filtering (like 'only find my posts'), prefer using entity filtering and the database directly.\nFor numbers/integer.\nenum with potential values date_time, time, date, duration, email, hostname, ipv4, ipv6, uuid, uri, json_pointer, regex\nFor string.\nFor objects, the properties - for entities ensure to use primitives as children.\nType for the schema, for entities it is normally object. This is a list to allow to create null to make it nullable.\nList of (JSON) properties which are enabled to sort the findAll result set if enabled\nList of (JSON) properties which are enabled to filter the findAll result set if enabled (where clause)\nThe where operators which can be used in filters payload for findAll methods if enabled, using default enables main database ones. Not setting it will only enable = by default. Text - like operator for example, is tested in lower case.\nIf true we consider the identifiers are generated at create time - ensure your DDL is accurate if so.\nField generated at create time. It is often used for audit (datetime) and id fields (uuid). Only relevant for CRUD method type.\nField generated at update time. It is often used for audit (datetime). Only relevant for CRUD method type.\nList of properties representing the identifiers of the entity - JSON names, if ignored and properties has an id entry it will be used as identifier.\nImplicit where clause entries, note that create will need to use security since there is no entity context there.\nenum with potential values CAMEL_TO_SNAKE\nName of the field used to manage the versioning. If not set there is no revision (only a snapshot of the entity). If set the targetting field if should target either a number or a date (type=string and format=date-time) field. In such a case, the field is 100% managed by HCMS and is not writable by the client.\nFor create and update endpoints if relevant, should they be validated with jsonSchema. In such a case only the named binding of JSON-RPC is supported, not the array mode. Also take care to virtual fields which will be validated too.\nSecurity for creation access (create endpoint).\nSecurity for deletion access (deleteById endpoint).\nSecurity for creation access (update endpoint).\nSecurity for view access (findById, findAll endpoints).\nWhere clause (without WHERE keyword) to add to delete, it can use user.xxx to access field xxx of the JWT if it is there (else null will be used).\nWhere clause (without WHERE keyword) to add to update, it can use user.xxx to access field xxx of the JWT if it is there (else null will be used).\nWhere clause (without WHERE keyword) to add to findById and findAll, it can use user.xxx to access field xxx of the JWT if it is there (else null will be used).","title":"Model Configuration","url":"https://io.yupiik.hcms.github.io/hcms/model.html"}]